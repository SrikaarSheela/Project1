{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "StudentDS",
						"type": "DatasetReference"
					},
					"name": "StudentSource"
				},
				{
					"dataset": {
						"referenceName": "TeacherDs",
						"type": "DatasetReference"
					},
					"name": "TeacherSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FinalOP",
						"type": "DatasetReference"
					},
					"name": "sink",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Course as string,",
				"          DemoConducted as string,",
				"          EngagementNo as string,",
				"          Enrolled as string,",
				"          EnrollmentNumber as string,",
				"          Grade as string,",
				"          MailId as string,",
				"          StudentName as string,",
				"          TeacherMapped as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> StudentSource",
				"source(output(",
				"          CommunicationLevel as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          SessionHygine as string,",
				"          TeacherId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TeacherSource",
				"StudentSource, TeacherSource join(TeacherMapped == TeacherId,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['FinalOP'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink"
			]
		}
	}
}